\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<>>=
# Implementacao da funcao de treinamento Adaline

rm(list = ls())

trainAdaline <- function(xin, yd, eta, tol, maxEpocas, par) {
  dimXin <- dim(xin)
  N <- dimXin[1]
  n <- dimXin[2]
  
  if(par == 1) {
    wt <- as.matrix(runif(n + 1) - 0.5)
    xin <- cbind(1, xin)
  } else {
    wt <- as.matrix(runif(n) - 0.5)
  }
  
  nEpocas <- 0
  eEpoca <- tol + 1
  evec <- matrix(nrow = 1, ncol = maxEpocas)
  
  while ((nEpocas < maxEpocas) && (eEpoca > tol)) {
    ei2 <- 0
    xSeq <- sample(N)
    
    for(i in 1:N) {
      iRand <- xSeq[i]
      yHat <- 1.0 * ((xin[iRand,] %*% wt))
      ei <- yd[iRand] - yHat
      dw <- eta * ei * xin[iRand,]
      wt <- wt + dw
      ei2 <- ei2 + ei * ei
    }
    
    nEpocas <- nEpocas + 1
    evec[nEpocas] <- ei2 / N
    eEpoca <- evec[nEpocas]
  }
  
  retList <- list(wt, evec[1:nEpocas])
  return(retList)
}
@

<<>>=
  # Problema Univariado
  N <- 20
  xt <- matrix(runif(N , 0, 10), ncol = 1)
  yt <- (3 * xt + 5) + matrix(rnorm(N), ncol = 1)
  
  plot(xt, yt)

  retlist <- trainAdaline(xt, yt, 0.001, 0.05, 1000, 1)

  evec <- retlist[[2]]
  plot(evec[1:10], type = 'l')
  wfinal <- retlist[[1]]
  
  plot(retlist[[2]])
  
  xrange <- cbind(1, seq(0,10,0.1))
  yrange <- xrange %*% wfinal
  
  plot(xt, yt, xlim = c(0,10), ylim = c(0,25))
  par(new = T)
  plot(xrange[,2], yrange, type='l', xlim = c(0,10), ylim = c(0,25))

@

<<>>=
# Problema multivariado
  
  t <- seq(0, 2 * pi, 0.1 * pi)
  x1 <- matrix(sin(t)+cos(t), ncol = 1)
  x2 <- matrix(tanh(t), ncol = 1)
  x3 <- matrix(sin(4 * t), ncol = 1)
  x4 <- matrix(abs(sin(t)), ncol = 1)
  
  y <- x1 + 2*x2 + 0.8*x3 + 3.2*x4 + pi/2
  x <- cbind(x1, x2, x3, x4)
  retlist <- trainAdaline(x, y, 0.01, 0.01, 50, 1)
  
  w <- retlist[[1]]
  ttest <- seq(0, 2*pi, 0.01*pi)
  x1t <- matrix(sin(ttest) + cos(ttest), ncol = 1)
  x2t <- matrix(tanh(ttest), ncol = 1)
  x3t <- matrix(sin(4*ttest), ncol = 1)
  x4t <- matrix(abs(sin(ttest)), ncol = 1)
  xt <- cbind(1, x1t, x2t, x3t, x4t)
  
  yt <- xt %*% w
  yreal <- 3.2*x4t + 0.8*x3t + 2*x2t + x1t + pi/2
  
  plot(t, y, col='red', xlim=c(0,6), ylim = c(0,10), xlab='t', ylab='Saida')
  par(new = T)
  plot(ttest, yreal,xlab = '', ylab = '', type = 'l', col='blue', xlim=c(0,6), ylim = c(0,10))
  par(new = T)
  plot(ttest, yt,  xlab = '', ylab = '', type = 'l', col='green', xlim=c(0,6), ylim = c(0,10))
  
@



<<>>=
# Exemplo com base de dados reais  
  
@















<<>>=
# Problema Univariado - Livro

t <- matrix(seq(0, 2*pi, 0.1*pi), ncol = 1)
x <- sin(t)
y <- matrix(4 * x + 2, ncol = 1)

retList <- trainAdaline(x, y, 0.01, 0.01, 50, 1)
w <- retList[[1]]
erro <- retList[[2]]

print(retList)
print(w)
print(erro)

@


\end{document}
