trainPerceptron <- function(xin, yd, eta, tol, maxEpocas, par) {
dimXin <- dim(xin)
N <- dimXin[1]
n <- dimXin[2]
if(par == 1) {
wt <- as.matrix(runif(n + 1) - 0.5)
xin <- cbind(-1, xin)
} else {
wt <- as.matrix(runif(n) - 0.5)
}
nEpocas <- 0
eEpoca <- tol + 1
evec <- matrix(nrow = 1, ncol = maxEpocas)
while ((nEpocas < maxEpocas) && (eEpoca > tol)) {
ei2 <- 0
xSeq <- sample(N)
for(i in 1:N) {
iRand <- xSeq[i]
yHat <- 1.0 * ((xin[iRand,] %*% wt) >= 0)
ei <- yd[iRand] - yHat
dw <- eta * ei * xin[iRand,]
wt <- wt + dw
ei2 <- ei2 + ei * ei
}
nEpocas <- nEpocas + 1
evec[nEpocas] <- ei2 / N
eEpoca <- evec[nEpocas]
}
retList <- list(wt, evec[1:nEpocas])
return(retList)
}
yPerceptron <- function (xvec, w, par) {
if (par == 1){
xvec <- cbind(1, xvec)
}
u <- xvec %*% w
y <- 1.0 * (u >= 0)
return(as.matrix(y))
}
s1 <- 0.4
s2 <- 0.4
nc <- 200
xc1 <- matrix(rnorm(nc * 2), ncol = 2) * s1 + t(matrix((c(2,2)), ncol = nc, nrow = 2))
xc2 <- matrix(rnorm(nc * 2), ncol = 2) * s2 + t(matrix((c(4,4)), ncol = nc, now = 2))
s1 <- 0.4
s2 <- 0.4
nc <- 200
xc1 <- matrix(rnorm(nc * 2), ncol = 2) * s1 + t(matrix((c(2,2)), ncol = nc, nrow = 2))
xc2 <- matrix(rnorm(nc * 2), ncol = 2) * s2 + t(matrix((c(4,4)), ncol = nc, nrow = 2))
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6), xlab = 'x_1', ylab = 'x_2')
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
x1_reta <- seq(6/100, 6, 6/100)
x2_reta <- - x1_reta + 6
par(new = T)
plot(x1_reta, x2_reta, type = 'l', col = 'orange', xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
xc1 <- cbind(xc1, 0)
xc2 <- cbind(xc2, 1)
x <- rbind(xc1, xc2)
retlist <- trainPerceptron(x[, 1:2], x[,3], 0.1, 0.01, 100, 1)
w <- matrix(retlist[[1]])
seqi <- seq(0, 6, 0.1)
seqj <- seq(0, 6, 0.1)
rt <- matrix(0, nrow = length(seqi), ncol = length(seqj))
ci <- 0
for (i in seqi){
ci <- ci + 1
cj <- 0
for(j in seqj){
cj <- cj + 1
x <- as.matrix(t(c(i, j)))
rt[ci, cj] <- yPerceptron(x, w, 1)
}
}
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6), xlab = 'x_1', ylab = 'x_2')
par(new = True)
xc1 <- cbind(xc1, 0)
xc2 <- cbind(xc2, 1)
x <- rbind(xc1, xc2)
retlist <- trainPerceptron(x[, 1:2], x[,3], 0.1, 0.01, 100, 1)
w <- matrix(retlist[[1]])
seqi <- seq(0, 6, 0.1)
seqj <- seq(0, 6, 0.1)
rt <- matrix(0, nrow = length(seqi), ncol = length(seqj))
ci <- 0
for (i in seqi){
ci <- ci + 1
cj <- 0
for(j in seqj){
cj <- cj + 1
x <- as.matrix(t(c(i, j)))
rt[ci, cj] <- yPerceptron(x, w, 1)
}
}
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6), xlab = 'x_1', ylab = 'x_2')
par(new = T)
plot(x2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
xc1 <- cbind(xc1, 0)
xc2 <- cbind(xc2, 1)
x <- rbind(xc1, xc2)
retlist <- trainPerceptron(x[, 1:2], x[,3], 0.1, 0.01, 100, 1)
w <- matrix(retlist[[1]])
seqi <- seq(0, 6, 0.1)
seqj <- seq(0, 6, 0.1)
rt <- matrix(0, nrow = length(seqi), ncol = length(seqj))
ci <- 0
for (i in seqi){
ci <- ci + 1
cj <- 0
for(j in seqj){
cj <- cj + 1
x <- as.matrix(t(c(i, j)))
rt[ci, cj] <- yPerceptron(x, w, 1)
}
}
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6), xlab = 'x_1', ylab = 'x_2')
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
par(new = T)
contour(seqi, seqj, rt, xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
xc1 <- cbind(xc1, 0)
xc2 <- cbind(xc2, 1)
x <- rbind(xc1, xc2)
retlist <- trainPerceptron(x[, 1:2], x[,3], 0.1, 0.01, 100, 1)
w <- matrix(retlist[[1]])
seqi <- seq(0, 6, 0.1)
seqj <- seq(0, 6, 0.1)
rt <- matrix(0, nrow = length(seqi), ncol = length(seqj))
ci <- 0
for (i in seqi){
ci <- ci + 1
cj <- 0
for(j in seqj){
cj <- cj + 1
x <- as.matrix(t(c(i, j)))
rt[ci, cj] <- yPerceptron(x, w, 1)
}
}
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6), xlab = 'x_1', ylab = 'x_2')
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
par(new = T)
contour(seqi, seqj, rt, xlim = c(0,6), ylim = c(0,6), xlab = '', ylab = '')
View(rt)
persp3D(seqi, seqj, rt, count = T, theta = - 20, phi = 30, r = 40, d = 0.1, expand = 0.5, ltheta = 90, lphi = 90, shade = 0.4, ticktype = "detailed", nticks = 5)
persp3D(seqi, seqj, rt, counter = T, theta = -20, phi = 30, r = 40, d = 0.1, expand = 0.5, ltheta = 90, lphi = 90, shade = 0.4, ticktype = "detailed", nticks = 5)
trainPerceptron <- function(xin, yd, eta, tol, maxEpocas, par) {
dimXin <- dim(xin)
N <- dimXin[1]
n <- dimXin[2]
if(par == 1) {
wt <- as.matrix(runif(n + 1) - 0.5)
xin <- cbind(-1, xin)
} else {
wt <- as.matrix(runif(n) - 0.5)
}
nEpocas <- 0
eEpoca <- tol + 1
evec <- matrix(nrow = 1, ncol = maxEpocas)
while ((nEpocas < maxEpocas) && (eEpoca > tol)) {
ei2 <- 0
xSeq <- sample(N)
for(i in 1:N) {
iRand <- xSeq[i]
yHat <- 1.0 * ((xin[iRand,] %*% wt) >= 0)
ei <- yd[iRand] - yHat
dw <- eta * ei * xin[iRand,]
wt <- wt + dw
ei2 <- ei2 + ei * ei
}
nEpocas <- nEpocas + 1
evec[nEpocas] <- ei2 / N
eEpoca <- evec[nEpocas]
}
retList <- list(wt, evec[1:nEpocas])
return(retList)
}
yPerceptron <- function (xvec, w, par) {
if (par == 1){
xvec <- cbind(1, xvec)
}
u <- xvec %*% w
y <- 1.0 * (u >= 0)
return(as.matrix(y))
}
s1 <- 0.4
s2 <- 0.4
nc <- 200
xc1 <- matrix(rnorm(nc * 2), ncol = 2) * s1, t(matrix((c(2,2)), ncol = nc, nrow = 2))
s1 <- 0.4
s2 <- 0.4
nc <- 200
xc1 <- matrix(rnorm(nc * 2), ncol = 2) * s1 + t(matrix((c(2,2)), ncol = nc, nrow = 2))
xc2 <- matrix(rnorm(nc * 2), ncol = 2) * s2 + t(matrix((c(4,4)), ncol = nc, nrow = 2))
xc1 <- cbind(xc1, 0)
xc2 <- cbind(xc2, 1)
x <- rbind(xc1, xc2)
Num = 280
amostra = sample(400)
x_train <- x[amostra[1:Num], 1:2]
y_train <- x[amostra[1:Num], 3]
Num = 281
x_test <- x[amostra[Num:400], 1:2]
y_test <- x[amostra[Num:400], 3]
retlist <- trainPerceptron(x_train, y_train, 0.1, 0.01, 100, 1)
w <- matrix(retlist[[1]])
y_hat <- yPerceptron(x_test, w, par = 1)
teste = 120
acuracia <- 1 - ((t(y_test - y_hat) %*% (y_test - y_hat)) / (teste))
Matriz_confusao <- matrix(0, 2, 2)
for(i in 1:120){
if(y_test[i] == 1) {
if(y_hat[i,] == 1){
Matriz_confusao[1,1] = Matriz_confusao[1,1] + 1
} else{
Matriz_confusao[1,2] = Matriz_confusao[1,2] + 1
}
}
if(y_test[i] == 0) {
if(y_hat[i,] == 0){
Matriz_confusao[2,2] = Matriz_confusao[1,1] + 1
} else{
Matriz_confusao[2,1] = Matriz_confusao[2,1] + 1
}
}
}
Matriz_confusao
acuracia
s1 <- 0.4
s2 <- 0.4
nc <- 200
xc1 <- matrix(rnorm(nc * 2), ncol = 2) * s1 + t(matrix((c(2,2)), ncol = nc, nrow = 2))
xc2 <- matrix(rnorm(nc * 2), ncol = 2) * s2 + t(matrix((c(4,4)), ncol = nc, nrow = 2))
xc1 <- cbind(xc1, 0)
xc2 <- cbind(xc2, 1)
x <- rbind(xc1, xc2)
Num = 280
amostra = sample(400)
x_train <- x[amostra[1:Num], 1:2]
y_train <- x[amostra[1:Num], 3]
Num = 281
x_test <- x[amostra[Num:400], 1:2]
y_test <- x[amostra[Num:400], 3]
retlist <- trainPerceptron(x_train, y_train, 0.1, 0.01, 100, 1)
w <- matrix(retlist[[1]])
y_hat <- yPerceptron(x_test, w, par = 1)
teste = 120
acuracia <- 1 - ((t(y_test - y_hat) %*% (y_test - y_hat)) / (teste))
Matriz_confusao <- matrix(0, 2, 2)
for(i in 1:120){
if(y_test[i] == 1) {
if(y_hat[i,] == 1){
Matriz_confusao[1,1] = Matriz_confusao[1,1] + 1
} else{
Matriz_confusao[1,2] = Matriz_confusao[1,2] + 1
}
}
if(y_test[i] == 0) {
if(y_hat[i,] == 0){
Matriz_confusao[2,2] = Matriz_confusao[1,1] + 1
} else{
Matriz_confusao[2,1] = Matriz_confusao[2,1] + 1
}
}
}
Matriz_confusao
acuracia
rm(list = ls())
while (dev.cur() != 1) dev.off()
trainPerceptron <- function(xin, yd, eta, tol, maxEpocas, par) {
dimXin <- dim(xin)
N <- dimXin[1]
n <- dimXin[2]
if(par == 1) {
wt <- as.matrix(runif(n + 1) - 0.5)
xin <- cbind(-1, xin)
} else {
wt <- as.matrix(runif(n) - 0.5)
}
nEpocas <- 0
eEpoca <- tol + 1
evec <- matrix(nrow = 1, ncol = maxEpocas)
while ((nEpocas < maxEpocas) && (eEpoca > tol)) {
ei2 <- 0
xSeq <- sample(N)
for(i in 1:N) {
iRand <- xSeq[i]
yHat <- 1.0 * ((xin[iRand,] %*% wt) >= 0)
ei <- yd[iRand] - yHat
dw <- eta * ei * xin[iRand,]
wt <- wt + dw
ei2 <- ei2 + ei * ei
}
nEpocas <- nEpocas + 1
evec[nEpocas] <- ei2 / N
eEpoca <- evec[nEpocas]
}
retList <- list(wt, evec[1:nEpocas])
return(retList)
}
n <- 2
N <- 30
xc1 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(2,2), ncol = n, nrow = N, byrow = T)
xc2 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(4,4), ncol = n, nrow = N, byrow = T)
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6))
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6))
xall <- rbind(xc1, xc2)
yall <- rbind(matrix(0, nrow = N), matrix(1, nrow = N))
#Checar
retlist <- trainPerceptron(xall, yall, 0.001, 0.01, 1000, 1)
wfinal <-as.matrix(retlist[[1]])
plot(retlist[[2]], type = 'l')
(sign(cbind(-1, xall) %*% wfinal)+1) / 2
#reta <- ((wfinal[3] /w_final[2]) * x_all + (wfinal[1] / wfinal[2]))
xrange <- cbind(seq(0, 10, 0.1), seq(0, 10, 0.1), 1)
y <- cbind(xall, -1) %*% wfinal
reta <- -(wfinal[3] / wfinal[2])*xrange + (wfinal[1]/wfinal[2])
plot(xrange, reta, xlim=c(0,6), ylim=c(0,6), xlab='', ylab='', type='l')
par(new=T)
plot(xc1[,1], xc1[,2], col='red', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
par(new = T)
plot(xc2[,1], xc2[,2], col='blue', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
seqx1x2 <- seq(0, 6, 0.1)
lseq <- length(seqx1x2)
MZ <- matrix(nrow = lseq, ncol = lseq)
cr <- 0
for(i in 1:lseq) {
for(j in 1:lseq) {
cr <- cr + 1
x1 <- seqx1x2[i]
x2 <- seqx1x2[j]
x1x2 <- as.matrix((cbind(-1, x2, x1)))
u <- (x1x2 %*% wfinal)
MZ[i,j] <- 2 * (sign(u) + 1)
}
}
image((MZ))
persp(seqx1x2, seqx1x2, MZ)
n <- 2
N <- 30
xc1 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(2,2), ncol = n, nrow = N, byrow = T)
xc2 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(4,4), ncol = n, nrow = N, byrow = T)
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6))
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6))
xall <- rbind(xc1, xc2)
yall <- rbind(matrix(0, nrow = N), matrix(1, nrow = N))
#Checar
retlist <- trainPerceptron(xall, yall, 0.001, 0.01, 1000, 1)
wfinal <-as.matrix(retlist[[1]])
plot(retlist[[2]], type = 'l')
(sign(cbind(-1, xall) %*% wfinal)+1) / 2
#reta <- ((wfinal[3] /w_final[2]) * x_all + (wfinal[1] / wfinal[2]))
xrange <- cbind(seq(0, 10, 0.1), seq(0, 10, 0.1), 1)
y <- cbind(xall, -1) %*% wfinal
reta <- -(wfinal[3] / wfinal[2])*xrange + (wfinal[1]/wfinal[2])
plot(xrange, reta, xlim=c(0,6), ylim=c(0,6), xlab='', ylab='', type='l')
par(new=T)
plot(xc1[,1], xc1[,2], col='red', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
par(new = T)
plot(xc2[,1], xc2[,2], col='blue', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
seqx1x2 <- seq(0, 6, 0.1)
lseq <- length(seqx1x2)
MZ <- matrix(nrow = lseq, ncol = lseq)
cr <- 0
for(i in 1:lseq) {
for(j in 1:lseq) {
cr <- cr + 1
x1 <- seqx1x2[i]
x2 <- seqx1x2[j]
x1x2 <- as.matrix((cbind(-1, x2, x1)))
u <- (x1x2 %*% wfinal)
MZ[i,j] <- 2 * (sign(u) + 1)
}
}
image((MZ))
persp(seqx1x2, seqx1x2, MZ)
n <- 2
N <- 30
xc1 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(2,2), ncol = n, nrow = N, byrow = T)
xc2 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(4,4), ncol = n, nrow = N, byrow = T)
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6))
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6))
xall <- rbind(xc1, xc2)
yall <- rbind(matrix(0, nrow = N), matrix(1, nrow = N))
#Checar
retlist <- trainPerceptron(xall, yall, 0.001, 0.01, 1000, 1)
wfinal <-as.matrix(retlist[[1]])
plot(retlist[[2]], type = 'l')
(sign(cbind(-1, xall) %*% wfinal)+1) / 2
#reta <- ((wfinal[3] /w_final[2]) * x_all + (wfinal[1] / wfinal[2]))
xrange <- cbind(seq(0, 10, 0.1), seq(0, 10, 0.1), 1)
y <- cbind(xall, -1) %*% wfinal
reta <- -(wfinal[3] / wfinal[2])*xrange + (wfinal[1]/wfinal[2])
plot(xrange, reta, xlim=c(0,6), ylim=c(0,6), xlab='', ylab='', type='l')
par(new=T)
plot(xc1[,1], xc1[,2], col='red', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
par(new = T)
plot(xc2[,1], xc2[,2], col='blue', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
seqx1x2 <- seq(0, 6, 0.1)
lseq <- length(seqx1x2)
MZ <- matrix(nrow = lseq, ncol = lseq)
cr <- 0
for(i in 1:lseq) {
for(j in 1:lseq) {
cr <- cr + 1
x1 <- seqx1x2[i]
x2 <- seqx1x2[j]
x1x2 <- as.matrix((cbind(-1, x2, x1)))
u <- (x1x2 %*% wfinal)
MZ[i,j] <- 2 * (sign(u) + 1)
}
}
image((MZ))
persp(seqx1x2, seqx1x2, MZ)
n <- 2
N <- 30
xc1 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(2,2), ncol = n, nrow = N, byrow = T)
xc2 <- matrix(rnorm(60, sd = 0.5), ncol = n, nrow = N) + matrix(c(4,4), ncol = n, nrow = N, byrow = T)
plot(xc1[,1], xc1[,2], col = 'red', xlim = c(0,6), ylim = c(0,6))
par(new = T)
plot(xc2[,1], xc2[,2], col = 'blue', xlim = c(0,6), ylim = c(0,6))
xall <- rbind(xc1, xc2)
yall <- rbind(matrix(0, nrow = N), matrix(1, nrow = N))
#Checar
retlist <- trainPerceptron(xall, yall, 0.001, 0.01, 1000, 1)
wfinal <-as.matrix(retlist[[1]])
plot(retlist[[2]], type = 'l')
(sign(cbind(-1, xall) %*% wfinal)+1) / 2
#reta <- ((wfinal[3] /w_final[2]) * x_all + (wfinal[1] / wfinal[2]))
xrange <- cbind(seq(0, 10, 0.1), seq(0, 10, 0.1), 1)
y <- cbind(xall, -1) %*% wfinal
reta <- -(wfinal[3] / wfinal[2])*xrange + (wfinal[1]/wfinal[2])
plot(xrange, reta, xlim=c(0,6), ylim=c(0,6), xlab='', ylab='', type='l')
par(new=T)
plot(xc1[,1], xc1[,2], col='red', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
par(new = T)
plot(xc2[,1], xc2[,2], col='blue', xlim=c(0,6), ylim=c(0,6), xlab='x', ylab='y')
seqx1x2 <- seq(0, 6, 0.1)
lseq <- length(seqx1x2)
MZ <- matrix(nrow = lseq, ncol = lseq)
cr <- 0
for(i in 1:lseq) {
for(j in 1:lseq) {
cr <- cr + 1
x1 <- seqx1x2[i]
x2 <- seqx1x2[j]
x1x2 <- as.matrix((cbind(-1, x2, x1)))
u <- (x1x2 %*% wfinal)
MZ[i,j] <- 2 * (sign(u) + 1)
}
}
image((MZ))
persp(seqx1x2, seqx1x2, MZ)
